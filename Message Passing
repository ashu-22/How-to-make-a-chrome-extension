A content script has access to the current page, but is limited in the APIs it can access. 
For example, it cannot listen for clicks on the browser action. 
We need to add a different type of script to our extension, a background script, which has access to every Chrome API but cannot access the current page. 
As Google puts it:


So the content script will be able to pull a URL out of the current page, but will need to hand that URL over to the background script to do something useful with it. 
In order to communicate, we’ll use what Google calls message passing, which allows scripts to send and listen for messages. 
It is the only way for content scripts and background scripts to interact.


Add the following to tell manifest.json about the background script:


"background": {
  "scripts": ["background.js"]
}
/***********************************************************\

// background.js

// Called when the user clicks on the browser action.
chrome.browserAction.onClicked.addListener(function(tab) {
  // Send a message to the active tab
  chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
    var activeTab = tabs[0];
    chrome.tabs.sendMessage(activeTab.id, {"message": "clicked_browser_action"});
  });
});


This sends an arbitrary JSON payload to the current tab. The keys of the JSON payload can be anything, but I chose "message" for simplicity. Now we need to listen for that message in content.js:

// content.js
chrome.runtime.onMessage.addListener(
  function(request, sender, sendResponse) {
    if( request.message === "clicked_browser_action" ) {
      var firstHref = $("a[href^='http']").eq(0).attr("href");

      console.log(firstHref);
    }
  }
);
Notice that all of our previous code has been moved into the listener, so that it is only run when the payload is received. Every time you click the browser action icon, you should see a URL get logged to the console. If it’s not working, try reloading the extension and then reloading the page.

